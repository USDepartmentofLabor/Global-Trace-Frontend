import { Vue, Component, Prop } from 'vue-property-decorator';
import Dropdown from 'components/FormUI/Dropdown';
import { RiskSeverityEnum } from 'enums/taxonomy-exploitation';
import Input from 'components/FormUI/Input';
import InputGroup from 'components/FormUI/InputGroup';
import MessageError from 'components/FormUI/MessageError';
import * as Styled from '../styled';

@Component
export default class Info extends Vue {
  @Prop({ required: true }) readonly isSubmitting: boolean;
  @Prop({ default: null }) messageErrors: App.MessageError;
  @Prop({
    default: () => {
      //
    },
  })
  changeInput: () => void;

  private riskSeveritySelected: App.DropdownOption = null;
  private formName: string = 'taxonomyExploitationForm';

  private riskSeverityOptions: App.DropdownOption[] = [
    {
      id: RiskSeverityEnum.LOW,
      name: RiskSeverityEnum.LOW.toString(),
    },
    {
      id: RiskSeverityEnum.MODERATE,
      name: RiskSeverityEnum.MODERATE.toString(),
    },
    {
      id: RiskSeverityEnum.MEDIUM,
      name: RiskSeverityEnum.MEDIUM.toString(),
    },
    {
      id: RiskSeverityEnum.HIGH,
      name: RiskSeverityEnum.HIGH.toString(),
    },
    {
      id: RiskSeverityEnum.EXTREME,
      name: RiskSeverityEnum.EXTREME.toString(),
    },
  ];

  get formData(): App.Any {
    return this.$formulate.registry.get(this.formName).proxy;
  }

  get riskSeverity(): number {
    return this.formData.riskSeverity;
  }

  set riskSeverity(value: number) {
    this.$formulate.setValues(this.formName, {
      ...this.formData,
      riskSeverity: value,
    });
  }

  created() {
    this.riskSeveritySelected = this.riskSeverityOptions.find(
      ({ id }) => id === this.riskSeverity,
    );
  }

  onChangeSeverity(option: App.DropdownOption = null): void {
    this.riskSeveritySelected = option;
    this.riskSeverity = option.id as number;
  }

  renderCategory(): JSX.Element {
    return (
      <Styled.Row>
        <Input
          label={this.$t('category')}
          name="category"
          height="48px"
          placeholder={this.$t('category')}
          validation="bail|required"
          changeValue={this.changeInput}
          autoTrim
          maxLength={255}
          validationMessages={{
            required: this.$t('validation.required', {
              field: this.$t('category').toLowerCase(),
            }),
          }}
        />
        {this.messageErrors && (
          <MessageError
            field="categoryName"
            messageErrors={this.messageErrors}
          />
        )}
      </Styled.Row>
    );
  }

  renderIndicatorName(): JSX.Element {
    return (
      <Styled.Row>
        <Input
          label={this.$t('indicator')}
          name="indicatorName"
          height="48px"
          placeholder={this.$t('indicator')}
          validation="bail|required"
          changeValue={this.changeInput}
          autoTrim
          maxLength={255}
          validationMessages={{
            required: this.$t('validation.required', {
              field: this.$t('indicator').toLowerCase(),
            }),
          }}
        />
        {this.messageErrors && (
          <MessageError field="indicator" messageErrors={this.messageErrors} />
        )}
      </Styled.Row>
    );
  }

  renderSubIndicatorName(): JSX.Element {
    return (
      <Styled.Row>
        <Input
          label={this.$t('sub_indicator')}
          name="subIndicatorName"
          height="48px"
          placeholder={this.$t('sub_indicator')}
          validation="bail|required"
          changeValue={this.changeInput}
          autoTrim
          validationMessages={{
            required: this.$t('validation.required', {
              field: this.$t('sub_indicator').toLowerCase(),
            }),
          }}
        />
        {this.messageErrors && (
          <MessageError
            field="subIndicatorName"
            messageErrors={this.messageErrors}
          />
        )}
      </Styled.Row>
    );
  }

  renderSeverity(): JSX.Element {
    return (
      <Dropdown
        title={this.$t('risk_severity')}
        placeholder={this.$t('risk_severity')}
        options={this.riskSeverityOptions}
        height="48px"
        trackBy="id"
        value={this.riskSeveritySelected}
        overflow
        allowEmpty={false}
        changeOptionValue={this.onChangeSeverity}
      />
    );
  }

  render(): JSX.Element {
    return (
      <InputGroup>
        {this.renderCategory()}
        {this.renderIndicatorName()}
        {this.renderSubIndicatorName()}
        {this.renderSeverity()}
      </InputGroup>
    );
  }
}

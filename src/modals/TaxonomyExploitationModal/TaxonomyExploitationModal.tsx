import { Component, Prop, Vue } from 'vue-property-decorator';
import { get, values } from 'lodash';
import { handleError } from 'components/Toast';
import Button from 'components/FormUI/Button';
import { RiskSeverityEnum } from 'enums/taxonomy-exploitation';
import InputGroup from 'components/FormUI/InputGroup';
import { updateTaxonomyExploitation } from 'api/taxonomy-exploitation';
import Info from './elements/Info';
import * as Styled from './styled';

@Component
export default class TaxonomyExploitationModal extends Vue {
  @Prop({ default: null })
  readonly taxonomyExploitation: TaxonomyManagement.TaxonomyExploitation;
  @Prop({
    default: () => {
      //
    },
  })
  onSuccess: () => void;

  private isSubmitting: boolean = false;
  private formInput: TaxonomyManagement.TaxonomyExploitationParams = {
    category: '',
    indicatorName: '',
    subIndicatorName: '',
    riskSeverity: RiskSeverityEnum.LOW,
  };
  private messageErrors: App.MessageError = null;

  get title(): string {
    if (this.taxonomyExploitation) {
      return this.$t('edit');
    }
    return this.$t('add');
  }

  created(): void {
    this.initData();
  }

  initData(): void {
    if (this.taxonomyExploitation) {
      const { category, name, subIndicator } = this.taxonomyExploitation;
      this.formInput.category = get(category, 'name', '');
      this.formInput.indicatorName = name;
      this.formInput.subIndicatorName = get(subIndicator, 'name', '');
      this.formInput.riskSeverity = get(subIndicator, 'riskSeverity');
    }
  }

  async onSubmit(): Promise<void> {
    try {
      this.isSubmitting = true;
      await updateTaxonomyExploitation(
        this.taxonomyExploitation.id,
        this.taxonomyExploitation.subIndicator.id,
        this.formInput,
      );
      this.$toast.success(this.$t('successfully_saved'));
      this.onSuccess();
      this.closeModal();
    } catch (error) {
      const errors = get(error, 'errors');
      if (values(errors).length > 0) {
        this.messageErrors = errors;
      } else {
        handleError(error as App.ResponseError);
      }
    } finally {
      this.isSubmitting = false;
    }
  }

  onCancel(): void {
    this.closeModal();
  }

  closeModal(): void {
    this.$emit('close');
  }

  onClearMessageErrors(): void {
    if (this.messageErrors) {
      this.messageErrors = null;
    }
  }

  renderInfo(): JSX.Element {
    return (
      <Info
        isSubmitting={this.isSubmitting}
        messageErrors={this.messageErrors}
        changeInput={this.onClearMessageErrors}
      />
    );
  }

  renderForm(): JSX.Element {
    return (
      <formulate-form
        v-model={this.formInput}
        name="taxonomyExploitationForm"
        scopedSlots={{
          default: ({ hasErrors }: { hasErrors: boolean }) => (
            <InputGroup>
              {this.renderInfo()}
              {this.renderActions(hasErrors)}
            </InputGroup>
          ),
        }}
        vOn:submit={this.onSubmit}
      />
    );
  }

  renderActions(hasError: boolean): JSX.Element {
    return (
      <Styled.Actions>
        <Styled.ButtonGroupEnd>
          <Button
            label={this.$t('common.action.cancel')}
            variant="transparentPrimary"
            click={this.onCancel}
          />
          <Button
            type="submit"
            variant="primary"
            label={this.$t('common.action.save_changes')}
            isLoading={this.isSubmitting}
            disabled={hasError}
          />
        </Styled.ButtonGroupEnd>
      </Styled.Actions>
    );
  }

  render(): JSX.Element {
    return (
      <modal-layout closeModal={this.closeModal} title={this.title}>
        <Styled.Wrapper>{this.renderForm()}</Styled.Wrapper>
      </modal-layout>
    );
  }
}
